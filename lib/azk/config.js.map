{"version":3,"file":"config.js","sources":["../../src/config.js","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"AAAA;ACAI,CAAJ,EAAI,CAAA,YAAY,eAAoB,CAAC;UCArC,CAAA,OAAO,CFAiB,WAAW,CEAT;;;AFCtB,CAAJ,EAAI,CAAA,IAAI,EAAM,CAAA,OAAO,CAAC,MAAM,CAAC,CAAC;AAC1B,CAAJ,EAAI,CAAA,OAAO,EAAG,CAAA,OAAO,CAAC,UAAU,CAAC,CAAC;AAC9B,CAAJ,EAAI,CAAA,EAAE,EAAQ,CAAA,OAAO,CAAC,IAAI,CAAC,CAAC;AAGxB,CAAJ,EAAI,CAAA,QAAQ,EAAI,CAAA,IAAI,CAAC,eAAe,CAAE,CAAA,IAAI,KAAK,CAAC,IAAI,CAAE,KAAI,CAAC,CAAC,CAAC;AACzD,CAAJ,EAAI,CAAA,SAAS,EAAG,CAAA,IAAI,CAAC,eAAe,CAAE,CAAA,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAE,OAAM,CAAE,OAAM,CAAC,CAAC,CAAC;AAG3E,CAAJ,EAAI,CAAA,WAAW,EAAG,EAAC,IAAI,CAAC,YAAY,CAAC,CAAA,EAAI,OAAM,CAAC,CAAC;AAI7C,CAAJ,EAAI,CAAA,OAAO,EAAG,CAAA,IAAI,CAAC,mBAAmB,CAAE,YAAW,CAAC,CAAC;AACjD,CAAJ,EAAI,CAAA,KAAK,EAAK,CAAA,IAAI,CAAC,iBAAiB,CAAE,CAAA,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;AAG5D,CAAJ,EAAI,CAAA,QAAQ,EAAG;AACX,CAAA,GAAE,CAAE,CAAA,IAAI,CAAC,iBAAiB,CAAE,MAAK,CAAC;AACpC,CAAA,KAAI,CAAE,CAAA,IAAI,CAAC,mBAAmB,CAAC;AAC/B,CAAA,KAAI,CAAE,CAAA,IAAI,CAAC,mBAAmB,CAAE,GAAE,CAAC;AACnC,CAAA,SAAQ,CAAE,CAAA,gBAAgB,EAAG,CAAA,IAAI,CAAC,mBAAmB,CAAC;CAAA,AACvD,CAAC;AAGE,CAAJ,EAAI,CAAA,WAAW,EAAG,CAAA,IAAI,CACpB,iBAAiB,CACjB,EAAC,WAAW,EAAG,CAAA,SAAS,EAAG,MAAK,CAAA,CAAG,QAAO,CAAA,CAAG,8BAA6B,CAAC,CAC5E,CAAC;AAGE,CAAJ,EAAI,CAAA,SAAS,EAAG,CAAA,IAAI,CAAC,WAAW,CAAC,CAAA,CAAG,QAAO,EAAG,OAAM,CAAC;CAErD,OAAS,MAAK,CAAC,OAAO;AACpB,CAAA,EAAC,KAAK,CAAC,OAAO,YAAG,MAAM,CAAE,CAAA,GAAG,CAAK;CAC/B,OAAI,GAAG,GAAI,IAAG;AACZ,CAAA,YAAO,CAAC,GAAG,CAAC,EAAG,CAAA,CAAC,MAAM,CAAC,EAAE,CAAE,CAAA,OAAO,CAAC,GAAG,CAAC,CAAE,OAAM,CAAC,CAAC;CAAA,EACpD,EAAC,CAAC;CACH,OAAO,QAAO,CAAC;CAChB;AAEG,CAAJ,EAAI,CAAA,kBAAkB,EAAG,CAAA,WAAW,EAClC,mCAAkC,EAClC,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,qBAAoB,CAAC,CAAC;AAEzC,CAAJ,EAAI,CAAA,OAAO,EAAG,CAAA,KAAK,CAAC;AAClB,CAAA,IAAG,CAAE;AACH,CAAA,WAAQ,CAAE,aAAY;AACtB,CAAA,SAAM,CAAI,QAAO;AACjB,CAAA,UAAO,CAAG,OAAM;AAChB,CAAA,QAAK,CAAK,EACR,cAAc,CAAE,KAAI,CACrB;AACD,CAAA,QAAK,CAAK;AACR,CAAA,aAAQ,CAAR,SAAQ;AACR,CAAA,SAAI,CAAI,UAAS;AACjB,CAAA,SAAI,CAAI,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,OAAM,CAAC;AACpC,CAAA,QAAG,CAAK,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,OAAM,CAAE,UAAS,CAAC;AAE/C,CAAA,uBAAkB,CAAE,mBAAkB;AAEtC,CAAA,cAAS,CAAE,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,MAAK,CAAE,YAAW,CAAC;AACnD,CAAA,cAAS,CAAE,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,MAAK,CAAE,YAAW,CAAC;AACnD,CAAA,kBAAa,CAAE,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,MAAK,CAAE,kBAAiB,CAAC;AAC7D,CAAA,gBAAW,CAAE,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,MAAK,CAAE,cAAa,CAAC;AAEvD,CAAA,iBAAY,CAAG,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,MAAK,CAAE,eAAc,CAAC;AAC1D,CAAA,qBAAgB,CAAG,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,MAAK,CAAE,qBAAoB,CAAC;AACpE,CAAA,eAAU,CAAK,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,MAAK,CAAE,UAAS,CAAC;AACrD,CAAA,kBAAa,CAAE,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,MAAK,CAAE,eAAc,CAAC;AAE1D,CAAA,UAAK,CAAE,CAAA,IAAI,CAAC,gBAAgB,CAAC;CAAA,IAC9B;AACD,CAAA,aAAU,CAAE;AACV,CAAA,YAAO,CAAE,EAAC,IAAI,CAAC,WAAW,CAAC,CAAA,CAAG,QAAO,EAAG,OAAM,CAAC;AAC/C,CAAA,SAAI,CAAE,CAAA,IAAI,CAAC,eAAe,CAAE,OAAM,CAAC;CAAA,IACpC;AACD,CAAA,SAAM,CAAE;AACN,CAAA,SAAI,CAAY,YAAW;AAC3B,CAAA,cAAS,CAAO,CAAA,IAAI,CAAC,eAAe,CAAC;AACrC,CAAA,eAAU,CAAM,MAAK;AACrB,CAAA,mBAAc,CAAE,MAAK;AACrB,CAAA,kBAAa,CAAG,wBAAuB;AACvC,CAAA,QAAG,CAAE;AACH,CAAA,cAAO,CAAE,KAAI;AACb,CAAA,YAAK,CAAE,GAAE;CAAA,MACV;CAAA,IACF;AACD,CAAA,QAAK,CAAE;AACL,CAAA,gBAAW,CAAE,YAAW;AACxB,CAAA,oBAAe,CAAE,MAAK;AACtB,CAAA,aAAQ,CAAR,SAAQ;AACR,CAAA,QAAG,CAAE,EACH,EAAE,CAAW,MAAK,CACnB;AACD,CAAA,OAAE,CAAE;AACF,CAAA,SAAE,CAAW,MAAK;AAClB,CAAA,WAAI,CAAS,QAAO;AACpB,CAAA,WAAI,CAAS,SAAQ;AACrB,CAAA,eAAQ,CAAK,SAAQ;AACrB,CAAA,WAAI,CAAS,CAAA,IAAI,CAAC,aAAa,CAAE,CAAA,EAAE,KAAK,EAAE,OAAO,CAAC;AAClD,CAAA,aAAM,CAAO,CAAA,IAAI,CAAC,eAAe,CAAE,CAAA,IAAI,MAAM,CAAC,EAAE,SAAS,EAAE,CAAA,CAAC,KAAI,CAAA,CAAC,KAAI,CAAA,CAAC,EAAC,CAAC,CAAC;AACzE,CAAA,cAAO,CAAM,CAAA,IAAI,CAAC,kBAAkB,CAAC;AACrC,CAAA,gBAAS,CAAI,CAAA,IAAI,CAAC,eAAe,CAAC;AAClC,CAAA,gBAAS,CAAI,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,KAAI,CAAE,iBAAgB,CAAC;AACzD,CAAA,iBAAU,CAAG,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,KAAI,CAAE,oBAAmB,CAAC;AAC5D,CAAA,kBAAW,CAAE,qBAAoB;AACjC,CAAA,qBAAc,CAAE,oCAAmC;CAAA,MACpD;CAAA,IACF;CAAA,EACF;AACD,CAAA,KAAI,CAAE;AACJ,CAAA,QAAK,CAAE,EACL,GAAG,CAAE,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,OAAM,CAAE,eAAc,CAAC,CAClD;AACD,CAAA,SAAM,CAAE;AACN,CAAA,cAAS,CAAK,WAAU;AACxB,CAAA,eAAU,CAAI,WAAU;AACxB,CAAA,gBAAW,CAAG,0BAAyB;CAAA,IACxC;AACD,CAAA,QAAK,CAAE;AACL,CAAA,oBAAe,CAAE,MAAK;AACtB,CAAA,OAAE,CAAE,EACF,SAAS,CAAG,CAAA,IAAI,KAAK,CAAC,SAAS,CAAE,KAAI,CAAE,sBAAqB,CAAC,CAC9D;CAAA,IACF;CAAA,EACF;CAAA,AACF,CAAC,CAAC;CAEH,OAAS,IAAG,CAAC,CAAE;CACb,OAAO,CAAA,IAAI,CAAC,UAAU,CAAE,aAAY,CAAC,CAAC;CACvC;AAEM,CAFN,OAEe,IAAG,CAAC,GAAG,CAAE;CACvB,KAAI,GAAG,GAAI,MAAK;CAAE,SAAO,CAAA,GAAG,EAAE,CAAC;AAE3B,CAF2B,IAE3B,CAAA,IAAI,EAAK,CAAA,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACxB,CAAJ,IAAI,CAAA,MAAM,EAAG,CAAA,OAAO,CAAC,GAAG,EAAE,CAAC,GAAI,CAAA,OAAO,CAAC,GAAG,CAAC,CAAC;CAE5C,MAAQ,GAAA,CAAA,CAAC,EAAG,EAAC,CAAE,CAAA,CAAC,EAAG,CAAA,IAAI,OAAO,CAAE,CAAA,CAAC,EAAE,CAAE;AACnC,CAAA,SAAM,EAAG,CAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;CACzB,OAAI,CAAC,MAAM;CAAE,WAAM;CAAA,EACpB;AAED,CAFC,OAEM,OAAM,CAAC;CACf;AAAA,CAAA,AAAC;CAEK,OAAS,IAAG,CAAC,GAAG,CAAE,CAAA,KAAK;;;CAC5B,KAAI,GAAG,GAAI,MAAK,CAAE;AAChB,CAAA,UAAO,IAAI,SAAS,EAAG,MAAK,CAAC;GAC9B,KAAM;AACD,CAAJ,MAAI,CAAA,IAAI,EGxJZ,CAAA,eAAe,OAAO,EHwJJ,GAAG,EAAE,EAAK,CAAA,GAAG,MAAM,CAAC,GAAG,CAAC,CGxJD,AHwJE,CAAC;AACpC,CAAJ,MAAI,CAAA,MAAM,0CAAM,CAAA,IAAI,IAAI,EAAE;YAAG,MAAK;;;;aAAE,CAAC;CACrC,UAAM,GAAG,EAAI,CAAA,IAAI,IAAI,EAAE,CAAE;AAAE,CAAA,WAAM,0CAAM,IAAG;cAAG,OAAM;;;;eAAE,CAAA;KAAE;AAAA,CAAA,IAAC;CAGxD,OAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAE;AACnB,CAAA,YAAO,CAAC,GAAG,EAAE,CAAC,EAAG,CAAA,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;KAC5C;AAED,CAFC,IAEA,MAAM,CAAC,OAAO,CAAE,OAAM,CAAC,CAAC;GAC1B;AACD,CADC,OACM,MAAK,CAAC;CACd;AIpKD,CAAA,KAAM,QAAQ;CCAd,UAAwB;CAAE,cAAyB;GAAE;CAArD,UAAwB;CAAE,cAAyB;GAAE;ACArD,CAAA,WAAU,CAAE,KAAI;CAAA,AFAkB,CAAC;CJsKnC","sourcesContent":["import { _, envs } from 'azk/utils';\nvar path    = require('path');\nvar dnsSync = require('dns-sync');\nvar os      = require('os');\n\n// Root path\nvar azk_root  = envs('AZK_ROOT_PATH', path.join('..', '..'));\nvar data_path = envs('AZK_DATA_PATH', path.join(envs('HOME'), '.azk', 'data'));\n\n// Use virtual machine\nvar requires_vm = (envs('AZK_USE_VM') == \"true\");\n\n// Vm informations\n// TODO: Show erro if not resolve ip\nvar vm_name = envs('AZK_AGENT_VM_NAME', \"azk-agent\");\nvar vm_ip   = envs('AZK_AGENT_VM_IP', dnsSync.resolve(vm_name));\n\n// Balancer configuration\nvar balancer = {\n    ip: envs('AZK_BALANCER_IP', vm_ip),\n  host: envs('AZK_BALANCER_HOST'),\n  port: envs('AZK_BALANCER_PORT', 80),\n  file_dns: \"/etc/resolver/\" + envs('AZK_BALANCER_HOST'),\n};\n\n// Docker opts\nvar docker_host = envs(\n  'AZK_DOCKER_HOST',\n  (requires_vm ? \"http://\" + vm_ip + \":2375\" : \"unix:///var/run/docker.sock\")\n);\n\n// Log level\nvar log_level = envs('AZK_DEBUG') ? 'debug' : 'warn';\n\nfunction merge(options) {\n  _.each(options, (values, key) => {\n    if (key != '*')\n      options[key] = _.merge({}, options['*'], values);\n  });\n  return options;\n}\n\nvar persistent_folders = requires_vm ?\n  '/mnt/sda1/azk/persistent_folders' :\n  path.join(data_path, 'persistent_folders');\n\nvar options = merge({\n  '*': {\n    manifest: \"Azkfile.js\",\n    locale  : 'en-US',\n    azk_dir : \".azk\",\n    flags   : {\n      show_deprecate: true,\n    },\n    paths   : {\n      azk_root,\n      data  : data_path,\n      logs  : path.join(data_path, 'logs'),\n      log   : path.join(data_path, 'logs', 'azk.log'),\n\n      persistent_folders: persistent_folders,\n\n      agent_pid: path.join(data_path, 'run', 'agent.pid'),\n      unfsd_pid: path.join(data_path, 'run', 'unfsd.pid'),\n      memcached_pid: path.join(data_path, 'run', 'memcachedjs.pid'),\n      hipache_pid: path.join(data_path, 'run', 'hipache.pid'),\n\n      agent_socket : path.join(data_path, 'run', 'agent.socket'),\n      memcached_socket : path.join(data_path, 'run', 'memcachedjs.socket'),\n      unfsd_file   : path.join(data_path, 'run', 'exports'),\n      balancer_file: path.join(data_path, 'run', 'hipache.json'),\n\n      unfsd: envs('AZK_UNFSD_PATH'),\n    },\n    logs_level: {\n      console: (envs('AZK_DEBUG') ? 'debug' : 'warn'),\n      file: envs('AZK_LOG_LEVEL', 'info'),\n    },\n    docker: {\n      host          : docker_host,\n      namespace     : envs('AZK_DOCKER_NS'),\n      repository    : 'azk',\n      default_domain: 'azk',\n      image_default : 'azukiapp/azktcl:0.0.2',\n      run: {\n        timeout: 1000,\n        retry: 10,\n      }\n    },\n    agent: {\n      requires_vm: requires_vm,\n      portrange_start: 11000,\n      balancer,\n      dns: {\n        ip         : vm_ip,\n      },\n      vm: {\n        ip         : vm_ip,\n        name       : vm_name,\n        user       : \"docker\",\n        password   : \"tcuser\",\n        cpus       : envs('AZK_VM_CPUS', os.cpus().length),\n        memory     : envs('AZK_VM_MEMORY', Math.floor(os.totalmem()/1024/1024/4)),\n        ssh_key    : envs('AZK_AGENT_VM_KEY'),\n        boot_disk  : envs('AZK_BOOT_FILE'),\n        data_disk  : path.join(data_path, \"vm\", \"azk-agent.vmdk\"),\n        blank_disk : path.join(data_path, \"vm\", \"azk-agent.vmdk.bz\"),\n        mount_point: '/home/docker/files',\n        authorized_key: '/home/docker/.ssh/authorized_keys',\n      }\n    }\n  },\n  test: {\n    paths: {\n      log: path.join(data_path, 'logs', 'azk_test.log'),\n    },\n    docker: {\n      namespace   : 'azk.test',\n      repository  : 'azk-test',\n      image_empty : 'cevich/empty_base_image',\n    },\n    agent: {\n      portrange_start: 12000,\n      vm: {\n        data_disk : path.join(data_path, \"vm\", \"azk-agent-spec.vmdk\"),\n      }\n    }\n  }\n});\n\nfunction env() {\n  return envs('NODE_ENV', 'production');\n}\n\nexport function get(key) {\n  if (key == \"env\") return env();\n\n  var keys   = key.split(':');\n  var buffer = options[env()] || options['*'];\n\n  for(var i = 0; i < keys.length; i++) {\n    buffer = buffer[keys[i]];\n    if (!buffer) break;\n  }\n\n  return buffer;\n};\n\nexport function set(key, value) {\n  if (key == \"env\") {\n    process.env.NODE_ENV = value;\n  } else {\n    var keys   = [env(), ...key.split(':')];\n    var buffer = { [keys.pop()]: value };\n    while(key  = keys.pop()) { buffer = { [key]: buffer } };\n\n    // Check env exist\n    if (!options[env()]) {\n      options[env()] = _.cloneDeep(options['*']);\n    }\n\n    _.merge(options, buffer);\n  }\n  return value;\n}\n\n","var __moduleName = $__placeholder__0;","require($__placeholder__0)","$traceurRuntime.spread($__placeholder__0)","module.exports = $__placeholder__0;","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true"]}