{"version":3,"file":"pull.js","sources":["../../../src/docker/pull.js","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"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","sourcesContent":["import { Q, _, defer } from 'azk';\nimport { XRegExp } from 'xregexp';\nimport { ProvisionNotFound, ProvisionPullError } from 'azk/utils/errors';\n\nvar msg_regex = {\n  pulling_another    : new XRegExp('Repository.*another'),\n  pulling_repository : new XRegExp('Pulling repository (?<repository>.*)'),\n  pulling_layers     : new XRegExp('Pulling dependent layers'),\n  pulling_metadata   : new XRegExp('Pulling metadata'),\n  pulling_fs_layer   : new XRegExp('Pulling fs layer'),\n  pulling_image      : new XRegExp(\n    'Pulling image \\((?<tag>.*)\\) from (?<repository>.*), endpoint: (?<endpoint>.*)'\n  ),\n  download: new XRegExp('Downloading'),\n  download_complete: new XRegExp('Download complete'),\n}\n\nfunction parse_status(msg) {\n  var result = {};\n  _.find(msg_regex, (regex, type) => {\n    var match  = XRegExp.exec(msg, regex);\n    if (match) {\n      result['type'] = type;\n      _.each(regex.xregexp.captureNames, function(key) {\n        if (match[key]) {\n          result[key] = match[key];\n        }\n      });\n      return true;\n    }\n  });\n  return result;\n}\n\nexport function pull(docker, repository, tag, stdout) {\n  var image   = `${repository}:${tag}`;\n  var promise = docker.createImage({\n    fromImage: repository,\n    tag: tag,\n  });\n\n  return promise.then((stream) => {\n    return defer((resolve, reject, notify) => {\n      stream.on('data', (data) => {\n        var msg  = JSON.parse(data.toString());\n        msg.type = \"pull_msg\";\n        if (msg.error) {\n          if (msg.error.match(/404/) || msg.error.match(/not found$/)) {\n            return reject(new ProvisionNotFound(image));\n          }\n          reject(new ProvisionPullError(image, msg.error));\n        } else {\n          msg.statusParsed = parse_status(msg.status);\n          if (msg.statusParsed) {\n            notify(msg);\n          }\n          if (stdout) {\n            stdout.write(msg.status + \"\\n\");\n          }\n        }\n      });\n\n      stream.on('end', () => resolve(docker.findImage(image)));\n    });\n  })\n}\n","var __moduleName = $__placeholder__0;","require($__placeholder__0)","module.exports = $__placeholder__0;","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true"]}